name: CI - release

on:
  push:
    branches:
    - '**'
    - '!dependabot/**'
  pull_request: {}

jobs:

  test_pr:
    name: Test PR
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        config:
        - qualifier: core
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: core
        - qualifier: knative
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: knative
        - qualifier: streaming-inmemory
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: streaming
          gateway: inmemory
        - qualifier: streaming-kafka
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: streaming
          gateway: kafka
        - qualifier: streaming-pulsar
          os: ubuntu-latest
          cluster: kind
          registry: docker-daemon
          runtime: streaming
          gateway: pulsar
      fail-fast: false
    runs-on: ${{ matrix.config.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup env
      run: |
        job=$(date +%s) # TODO use something that is assigned by CI to guarantee uniqueness
        echo "JOB_ID=${job}"

        echo "##[set-env name=CLUSTER]${{ matrix.config.cluster }}"
        echo "##[set-env name=REGISTRY]${{ matrix.config.registry }}"
        echo "##[set-env name=CLUSTER_NAME]release-${job}-${{ matrix.config.qualifier }}"
        echo "##[set-env name=NAMESPACE]release-${job}-${{ matrix.config.qualifier }}"
        echo "##[set-env name=RUNTIME]${{ matrix.config.runtime }}"
        echo "##[set-env name=GATEWAY]${{ matrix.config.gateway }}"
        echo "##[add-path]$(go env GOPATH)/bin"
      working-directory: release
      shell: bash
    - name: Install tools
      run: |
        ./fats/install.sh kubectl
        ./fats/install.sh riff
        ./fats/install.sh helm
        ./fats/install.sh ytt
        ./fats/install.sh kapp
        ./fats/install.sh k8s-tag-resolver
        curl -L https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64 -o yq
        chmod +x yq
        sudo mv yq /usr/local/bin/
      working-directory: release
      shell: bash
    - name: Package release
      run: |
        helm init --client-only
        make clean package
      working-directory: release
      shell: bash
    - name: Start
      run: ./fats/start.sh
      working-directory: release
      shell: bash
      timeout-minutes: 15
    - name: Install riff
      run: ./.github/workflows/ci-release/install-riff.sh unstaged
      working-directory: release
      shell: bash
      timeout-minutes: 15
    - name: Run tests
      run: ./.github/workflows/ci-release/acceptance.sh
      working-directory: release
      shell: bash
      timeout-minutes: 30
    - name: Collect diagnostics
      run: ./fats/diagnostics.sh
      working-directory: release
      shell: bash
      if: always()
      timeout-minutes: 1
    - name: Uninstall riff
      run: ./.github/workflows/ci-release/cleanup-riff.sh
      working-directory: release
      shell: bash
      if: always()
      timeout-minutes: 10
    - name: Cleanup
      run: ./fats/cleanup.sh
      working-directory: release
      shell: bash
      if: always()
      timeout-minutes: 10

  stage:
    name: Stage release
    if: github.event_name == 'push' && startsWith(github.repository, 'projectriff/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup env
      run: |
        echo "##[add-path]$(go env GOPATH)/bin"
      working-directory: release
      shell: bash
    - name: Install tools
      run: |
        ./fats/install.sh helm
        ./fats/install.sh gcloud
        ./fats/install.sh ytt
        ./fats/install.sh k8s-tag-resolver
        curl -L https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64 -o yq
        chmod +x yq
        sudo mv yq /usr/local/bin/
      working-directory: release
      shell: bash
      env:
        GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
    - name: Stage projectriff chart artifacts
      run: ./.github/workflows/ci-release/stage.sh
      working-directory: release
      shell: bash

  test:
    name: Test
    needs: stage
    if: github.event_name == 'push' && startsWith(github.repository, 'projectriff/')
    strategy:
      matrix:
        config:
        - qualifier: core
          os: ubuntu-latest
          cluster: kind
          registry: dockerhub
          runtime: core
        - qualifier: knative
          os: ubuntu-latest
          cluster: gke
          registry: gcr
          runtime: knative
        - qualifier: streaming-inmemory
          os: ubuntu-latest
          cluster: kind
          registry: dockerhub
          runtime: streaming
          gateway: inmemory
        - qualifier: streaming-kafka
          os: ubuntu-latest
          cluster: kind
          registry: dockerhub
          runtime: streaming
          gateway: kafka
        - qualifier: streaming-pulsar
          os: ubuntu-latest
          cluster: kind
          registry: dockerhub
          runtime: streaming
          gateway: pulsar
      fail-fast: false
    runs-on: ${{ matrix.config.os }}
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup env
      run: |
        job=$(date +%s) # TODO use something that is assigned by CI to guarantee uniqueness
        echo "JOB_ID=${job}"

        echo "##[set-env name=CLUSTER]${{ matrix.config.cluster }}"
        echo "##[set-env name=REGISTRY]${{ matrix.config.registry }}"
        echo "##[set-env name=CLUSTER_NAME]release-${job}-${{ matrix.config.qualifier }}"
        echo "##[set-env name=NAMESPACE]release-${job}-${{ matrix.config.qualifier }}"
        echo "##[set-env name=RUNTIME]${{ matrix.config.runtime }}"
        echo "##[set-env name=GATEWAY]${{ matrix.config.gateway }}"
      working-directory: release
      shell: bash
    - name: Install tools
      run: |
        ./fats/install.sh kubectl
        ./fats/install.sh riff
        ./fats/install.sh helm
        ./fats/install.sh ytt
        ./fats/install.sh kapp
        ./fats/install.sh gcloud
      working-directory: release
      shell: bash
    - name: Start
      run: ./fats/start.sh
      working-directory: release
      shell: bash
      timeout-minutes: 15
    - name: Install riff
      run: ./.github/workflows/ci-release/install-riff.sh staged
      working-directory: release
      shell: bash
      timeout-minutes: 15
    - name: Run tests
      run: ./.github/workflows/ci-release/acceptance.sh
      working-directory: release
      shell: bash
      timeout-minutes: 30
    - name: Collect diagnostics
      run: ./fats/diagnostics.sh
      working-directory: release
      shell: bash
      if: always()
      timeout-minutes: 1
    - name: Uninstall riff
      run: ./.github/workflows/ci-release/cleanup-riff.sh
      working-directory: release
      shell: bash
      if: always()
      timeout-minutes: 10
    - name: Cleanup
      run: ./fats/cleanup.sh
      working-directory: release
      shell: bash
      if: always()
      timeout-minutes: 10

  publish:
    name: Publish
    needs: test
    if: |
      github.event_name == 'push' && startsWith(github.repository, 'projectriff/') && (
        github.ref == 'refs/heads/master' || (
          startsWith(github.ref, 'refs/heads/v') && endsWith(github.ref, 'x')
        )
      )
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install tools
      run: |
        ./fats/install.sh helm
        ./fats/install.sh gcloud
      working-directory: release
      shell: bash
      env:
        GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
    - name: Publish Chart
      run: ./.github/workflows/ci-release/publish.sh
      working-directory: release
      shell: bash
